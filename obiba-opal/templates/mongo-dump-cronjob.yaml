{{- if .Values.mongo.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ printf "%s-dump-cronjob" .Values.mongo.name }}
spec:
  schedule: {{ .Values.mongo.backup.schedule }}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: mongo-dump
              image: {{ .Values.mongo.image }}
              env:
                - name: MONGO_HOST
                  value: {{ .Values.mongo.host | default "mongo" }}
                - name: MONGO_PORT
                  value: "{{ .Values.mongo.port }}"
                - name: MONGODATA_DATABASE
              {{- if or .Values.mongo.existingSecret .Values.global.existingSecret }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.mongo.existingSecret | default .Values.global.existingSecret }}
                      key: {{ .Values.mongo.existingSecretKeys.database.data }}
              {{- else }}
                  value: {{ .Values.mongo.database.data | quote }}
              {{- end }}
                - name: MONGOIDS_DATABASE
              {{- if or .Values.mongo.existingSecret .Values.global.existingSecret }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.mongo.existingSecret | default .Values.global.existingSecret }}
                      key: {{ .Values.mongo.existingSecretKeys.database.ids }}
              {{- else }}
                  value: {{ .Values.mongo.database.ids | quote }}
              {{- end }}
                - name: MONGO_USER
              {{- if or .Values.mongo.existingSecret .Values.global.existingSecret }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.mongo.existingSecret | default .Values.global.existingSecret }}
                      key: {{ .Values.mongo.existingSecretKeys.user }}
              {{- else }}
                  value: {{ .Values.mongo.user | quote }}
              {{- end }}
                - name: MONGO_PASSWORD
              {{- if or .Values.mongo.existingSecret .Values.global.existingSecret }}
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.mongo.existingSecret | default .Values.global.existingSecret }}
                      key: {{ .Values.mongo.existingSecretKeys.password }}
              {{- else }}
                  value: {{ .Values.mongo.password | quote }}
              {{- end }}
              command:
                - /bin/sh
                - -c
                - |
                  BACKUP_DATE=$(date +%F)
                  echo "Starting MongoDB backup for date: $BACKUP_DATE"
                  
                  if [ -n "$MONGODATA_DATABASE" ] && [ "$MONGODATA_DATABASE" != "" ]; then
                    echo "Backing up MONGODATA_DATABASE: $MONGODATA_DATABASE"
                    mongodump --host $MONGO_HOST \
                      --port $MONGO_PORT \
                      --username $MONGO_USER \
                      --password $MONGO_PASSWORD \
                      --authenticationDatabase admin \
                      --db $MONGODATA_DATABASE \
                      --archive=/dump/mongodata-$BACKUP_DATE.gz --gzip
                  else
                    echo "MONGODATA_DATABASE is not defined or empty, skipping backup"
                  fi
                  
                  if [ -n "$MONGOIDS_DATABASE" ] && [ "$MONGOIDS_DATABASE" != "" ]; then
                    echo "Backing up MONGOIDS_DATABASE: $MONGOIDS_DATABASE"
                    mongodump --host $MONGO_HOST \
                      --port $MONGO_PORT \
                      --username $MONGO_USER \
                      --password $MONGO_PASSWORD \
                      --authenticationDatabase admin \
                      --db $MONGOIDS_DATABASE \
                      --archive=/dump/mongoids-$BACKUP_DATE.gz --gzip
                  else
                    echo "MONGOIDS_DATABASE is not defined or empty, skipping backup"
                  fi
                  
                  echo "MongoDB backup completed at $(date)"
                  
                  # Clean up old backups based on limit
                  BACKUP_LIMIT={{ .Values.mongo.backup.limit | default 10 }}
                  echo "Keeping only $BACKUP_LIMIT most recent backups for each database"
                  
                  # Clean up mongodata backups
                  cd /dump && ls -t mongodata-*.gz 2>/dev/null | tail -n +$((BACKUP_LIMIT + 1)) | xargs -r rm -f
                  
                  # Clean up mongoids backups
                  cd /dump && ls -t mongoids-*.gz 2>/dev/null | tail -n +$((BACKUP_LIMIT + 1)) | xargs -r rm -f
                  
                  echo "MongoDB backup cleanup completed. Current backups:"
                  ls -la /dump/mongo*.gz 2>/dev/null | sort || echo "No backup files found"
              volumeMounts:
                - name: mongo-dump
                  mountPath: /dump
          volumes:
            - name: mongo-dump
              persistentVolumeClaim:
                claimName: {{ printf "%s-dump-pvc" .Values.mongo.name }}
          restartPolicy: OnFailure
{{- end }}
