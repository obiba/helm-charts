{{- if .Values.opal.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: opal-backup-cronjob
spec:
  schedule: {{ .Values.opal.backup.schedule | quote }}
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: opal-backup
              image: alpine
              command: ["/bin/sh", "-c"]
              args:
                # Use tar for consistency (safer than plain cp)
                - |
                  echo "Starting backup..."
                  cd /source && tar -czf /backup/opal-$(date +%F_%H%M%S).tar.gz conf data fs logs
                  echo "Backup completed at $(date)"
                  
                  # Clean up old backups based on limit
                  BACKUP_LIMIT={{ .Values.opal.backup.limit | default 10 }}
                  echo "Keeping only $BACKUP_LIMIT most recent backups"
                  
                  # List backup files sorted by modification time (newest first) and remove old ones
                  cd /backup && ls -t opal-*.tar.gz 2>/dev/null | tail -n +$((BACKUP_LIMIT + 1)) | xargs -r rm -f
                  
                  echo "Backup cleanup completed. Current backups:"
                  ls -la /backup/opal-*.tar.gz 2>/dev/null || echo "No backup files found"
              volumeMounts:
                - name: source-pvc
                  mountPath: /source
                - name: backup-pvc
                  mountPath: /backup
          volumes:
            - name: source-pvc
              persistentVolumeClaim:
                claimName: opal-storage-{{ include "opal.name" . }}-0
            - name: backup-pvc
              persistentVolumeClaim:
                claimName: opal-backup

{{- end }}
